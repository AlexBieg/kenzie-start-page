{"version":3,"sources":["things.js","App.js","utils.js","index.js"],"names":["weekNum","d","Date","setUTCDate","getUTCDate","getUTCDay","yearStart","UTC","getUTCFullYear","Math","ceil","getWeekNumber","backgroundChoice","floor","random","App","useState","date","setDate","currWeek","setCurrWeek","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","className","style","backgroundImage","toLocaleDateString","weekday","month","day","getDateText","timeStyle","getTimeText","onClick","THINGS","ReactDOM","render","document","getElementById"],"mappings":"gQAAe,G,MAAA,CACf,oBACA,uBACA,sBACA,qCACA,qBACA,4BACA,2CACA,+BACA,iDACA,+BACA,4BACA,qBACA,qBACA,oBACA,mBACA,+BACA,yBACA,qBACA,qBACA,0BACA,sBACA,kBACA,sCACA,2CACA,kCACA,iCACA,8BACA,cACA,mBACA,8BACA,oBACA,0BACA,qCACA,0BACA,yBACA,wCACA,mBACA,2BACA,sCACA,iDACA,qBACA,4CACA,2BACA,mCACA,+BACA,mCACA,0DACA,uBACA,kBACA,iCACA,8BACA,+BC/CMA,ECiBuB,WAC3B,IAAMC,EAAI,IAAIC,KACdD,EAAEE,WAAWF,EAAEG,aAAe,GAAKH,EAAEI,aAAa,IAClD,IAAIC,EAAY,IAAIJ,KAAKA,KAAKK,IAAIN,EAAEO,iBAAiB,EAAE,IAEvD,OADaC,KAAKC,OAAUT,EAAIK,GAAa,MAAY,GAAG,GDrB9CK,GAEVC,EAAmBH,KAAKI,MAAsB,GAAhBJ,KAAKK,SAAgB,GAyC1CC,MAvCf,WAAgB,IAAD,EACWC,mBAAS,IAAId,MADxB,mBACNe,EADM,KACAC,EADA,OAEmBF,mBAAShB,GAF5B,mBAENmB,EAFM,KAEIC,EAFJ,KAgBb,OCvByB,SAACC,EAAUC,GACpC,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IDNJQ,EAAY,WACVZ,EAAQ,IAAIhB,QACX,KAWD,yBAAK6B,UAAU,MAAMC,MAAO,CAAEC,gBAAgB,iEAAD,OApBvB,uBAoBuB,OAAuFrB,EAAvF,WAC3C,yBAAKmB,UAAU,QACb,6BCMmB,SAACd,GAC1B,OAAOA,EAAKiB,mBAAmB,QAAS,CAACC,QAAS,OAAQC,MAAO,OAAQC,IAAK,YDPjEC,CAAYrB,IACnB,6BCCmB,SAACA,GAC1B,OAAOA,EAAKiB,mBAAmB,QAAS,CAACK,UAAW,UDFvCC,CAAYvB,KAErB,yBAAKc,UAAU,UACb,0BAAMA,UAAU,eAEZZ,EAAW,GAAK,0BAAMY,UAAU,QAAQU,QAjB7B,WACnBrB,EAAYD,EAAW,KAgBiD,MAGpE,0BAAMY,UAAU,oBAAoBW,EAAOvB,IAC3C,0BAAMY,UAAU,eAEZZ,EAAWnB,GAAW,0BAAM+B,UAAU,QAAQU,QAnBvC,WACfrB,EAAYD,EAAW,KAkBO,SEnClCwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.989325cc.chunk.js","sourcesContent":["export default [\n'You are wonderful',\n'Your hair is awesome',\n'You can deadlift me',\n'You pull me out of my comfort zone',\n'I love kissing You',\n'Your smile warms my heart',\n'I met the most amazing person a year ago',\n'I can lightly kiss your nose',\n'I can rest my chin on your neck when we cuddle',\n'You look great in a crop top',\n'You got those booty gains',\n'You love pedicures',\n'You love back rubs',\n'You are beautiful',\n'You like to hike',\n'You are an incredible singer',\n'You have perfect pitch',\n'You can rock climb',\n'You can play piano',\n'You\\'re great at puzzles',\n'You are super smart',\n'You help people',\n'You care about the world around you',\n'You give people the benefit of the doubt',\n'A tiny angel was born this week',\n'You want to fix broken systems',\n'You care about your friends',\n'You love me',\n'You love Sputnik',\n'You care about your parents',\n'You make me laugh',\n'You ask me about my day',\n'You made me sing on our first date',\n'Your eyes make me smile',\n'You make going out fun',\n'You encourage us to eat at new places',\n'You cook with me',\n'You care about my family',\n'You took care of me when I was sick',\n'You work hard to keep our relationship healthy',\n'You love to travel',\n'You take care of me when I\\'m feeling down',\n'You make amazing risotto',\n'An amazing person was born today',\n'You taught me to sip the tea',\n'You encouraged me to get Sputnik',\n'You still love me even though I\\'m bad at washing dishes',\n'You tell me I\\'m cute',\n'You dress great',\n'Your Sputnik voice is adorable',\n'You get me amazing presents',\n'I\\'m ready for another year',\n];","import React, { useState } from 'react';\nimport './App.css';\nimport THINGS from './things.js';\nimport { getWeekNumber, useInterval, getTimeText, getDateText } from './utils';\n\nconst weekNum = getWeekNumber();\nconst baseBackgroundURL = 'background/sputnik-';\nconst backgroundChoice = Math.floor(Math.random() * 10 + 1);\n\nfunction App() {\n  const [date, setDate] = useState(new Date());\n  const [currWeek, setCurrWeek] = useState(weekNum);\n\n  useInterval(() => {\n    setDate(new Date());\n  }, 1000);\n\n  const previousWeek = () => {\n    setCurrWeek(currWeek - 1);\n  }\n\n  const nextWeek = () => {\n    setCurrWeek(currWeek + 1);\n  }\n\n  return (\n    <div className=\"App\" style={{ backgroundImage: `linear-gradient( rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5) ),url(${baseBackgroundURL}${backgroundChoice}.jpg)` }}>\n      <div className=\"date\">\n        <div>{ getDateText(date) }</div>\n        <div>{ getTimeText(date) }</div>\n      </div>\n      <div className=\"saying\">\n        <span className=\"saying-item\">\n          {\n            currWeek > 0 && <span className=\"arrow\" onClick={previousWeek}>{\"<\"}</span>\n          }\n        </span>\n        <span className=\"text saying-item\">{THINGS[currWeek]}</span>\n        <span className=\"saying-item\">\n          {\n            currWeek < weekNum && <span className=\"arrow\" onClick={nextWeek}>></span>\n          }\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport const getWeekNumber = () => {\n  const d = new Date();\n  d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay()||7));\n  var yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));\n  var weekNo = Math.ceil(( ( (d - yearStart) / 86400000) + 1)/7);\n  return weekNo;\n}\n\nexport const getTimeText = (date) => {\n  return date.toLocaleDateString('en-US', {timeStyle: 'short'})\n}\n\nexport const getDateText = (date) => {\n  return date.toLocaleDateString('en-US', {weekday: 'long', month: 'long', day: 'numeric'});\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}